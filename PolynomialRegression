################### Polynomial Regression ###################

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model
import pylab as pl


from sklearn.preprocessing import PolynomialFeatures
from sklearn import linear_model


df = pd.read_excel('Weather-V1.xlsx')
cdf = df[['Average','FM','SDK','VPM','PM','UPM','TMK','TXK','TNK']]


# Creating train and test dataset

msk = np.random.rand(len(df)) < 0.8
train = cdf[msk]
test = cdf[~msk]

# Polynomial regression

train_x = np.asanyarray(train[['FM','SDK','VPM','PM','UPM','TMK','TXK','TNK']])
train_y = np.asanyarray(train[['Average']])

test_x = np.asanyarray(test[['FM','SDK','VPM','PM','UPM','TMK','TXK','TNK']])
test_y = np.asanyarray(test[['Average']])


poly = PolynomialFeatures(degree=2)
train_x_poly = poly.fit_transform(train_x)


clf = linear_model.LinearRegression()
train_y_ = clf.fit(train_x_poly, train_y)
# The coefficients
print ('Coefficients: ', clf.coef_)
print ('Intercept: ',clf.intercept_)

# Prediction

from sklearn.metrics import r2_score

test_x_poly = poly.fit_transform(test_x)
test_y_ = clf.predict(test_x_poly)

print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_ - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((test_y_ - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y,test_y_ ) )


#Plot

plt.scatter(train.FM, train.Average,  color='blue')
XX = np.arange(0.0, 10.0, 0.1)
yy = clf.intercept_[0]+ clf.coef_[0][1]*XX+ clf.coef_[0][2]*np.power(XX, 2)
plt.plot(XX, yy, '-r' )
plt.xlabel("FM")
plt.ylabel("Average")
plt.show()

plt.scatter(train.SDK, train.Average,  color='blue')
XX = np.arange(0.0, 10.0, 0.1)
yy = clf.intercept_[0]+ clf.coef_[0][1]*XX+ clf.coef_[0][2]*np.power(XX, 2)
plt.plot(XX, yy, '-r' )
plt.xlabel("SDK")
plt.ylabel("Average")
plt.show()

plt.scatter(train.VPM, train.Average,  color='blue')
XX = np.arange(0.0, 10.0, 0.1)
yy = clf.intercept_[0]+ clf.coef_[0][1]*XX+ clf.coef_[0][2]*np.power(XX, 2)
plt.plot(XX, yy, '-r' )
plt.xlabel("VPM")
plt.ylabel("Average")
plt.show()

plt.scatter(train.PM, train.Average,  color='blue')
XX = np.arange(0.0, 10.0, 0.1)
yy = clf.intercept_[0]+ clf.coef_[0][1]*XX+ clf.coef_[0][2]*np.power(XX, 2)
plt.plot(XX, yy, '-r' )
plt.xlabel("PM")
plt.ylabel("Average")
plt.show()

plt.scatter(train.UPM, train.Average,  color='blue')
XX = np.arange(0.0, 10.0, 0.1)
yy = clf.intercept_[0]+ clf.coef_[0][1]*XX+ clf.coef_[0][2]*np.power(XX, 2)
plt.plot(XX, yy, '-r' )
plt.xlabel("UPM")
plt.ylabel("Average")
plt.show()

plt.scatter(train.TMK, train.Average,  color='blue')
XX = np.arange(0.0, 10.0, 0.1)
yy = clf.intercept_[0]+ clf.coef_[0][1]*XX+ clf.coef_[0][2]*np.power(XX, 2)
plt.plot(XX, yy, '-r' )
plt.xlabel("TMK")
plt.ylabel("Average")
plt.show()

plt.scatter(train.TXK, train.Average,  color='blue')
XX = np.arange(0.0, 10.0, 0.1)
yy = clf.intercept_[0]+ clf.coef_[0][1]*XX+ clf.coef_[0][2]*np.power(XX, 2)
plt.plot(XX, yy, '-r' )
plt.xlabel("TXK")
plt.ylabel("Average")
plt.show()

plt.scatter(train.TNK, train.Average,  color='blue')
XX = np.arange(0.0, 10.0, 0.1)
yy = clf.intercept_[0]+ clf.coef_[0][1]*XX+ clf.coef_[0][2]*np.power(XX, 2)
plt.plot(XX, yy, '-r' )
plt.xlabel("TNK")
plt.ylabel("Average")
plt.show()


